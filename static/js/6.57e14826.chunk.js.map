{"version":3,"sources":["constans/config.js","utills/apiCaller.js","actions/index.js","components/Task/TaskForm.js","components/Task/Search.js","components/Task/Sort.js","components/Task/Control.js","components/Task/TaskItem.js","components/Task/TaskList.js","pages/Task/TaskPage.js"],"names":["API_URL","callAPI","endpoint","method","body","axios","url","config","data","catch","err","console","log","actFetchProductRequest","dispatch","then","res","actFetchProduct","products","type","types","actDeleteProductRequest","id","actDeleteProduct","addProductReq","product","name","txtName","price","txtPrice","status","chkbStatus","addProduct","getProductReq","getProduct","updateProductReq","updateProduct","saveTask","task","toggleForm","openForm","closeForm","updateStatus","deleteTask","editTask","resetTaskEdit","fillterTable","fillter","searchTask","keyWord","sortTask","valueSearch","sort","TaskForm","props","onHuy","onReset","onCloseForm","state","onSave","bind","onHandleChange","event","target","value","this","setState","preventDefault","onSaveTask","isDisplayForm","className","onSubmit","onChange","onClick","prevProps","prevState","itemEditing","Component","connect","updateTask","action","Search","onSearch","keywWord","placeholder","Sort","by","onSort","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","role","href","valueSort","Control","TaskItem","onUpdateStatus","taskElm","OnDelete","onDeleteItem","onUpdate","onOpenForm","onEditTask","index","TaskList","onFillterTable","filter","toLowerCase","indexOf","undefined","a","b","elmTask","map","elm","key","search","TaskPage","addBT","onToggleForm","onFillter"],"mappings":"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","file":"static/js/6.57e14826.chunk.js","sourcesContent":["export const API_URL = 'https://5f90439fe0559c0016ad65b1.mockapi.io/';","import axios from 'axios';\nimport * as config from './../constans/config';\n\nexport default function callAPI(endpoint, method = 'GET',body){\n    return axios({\n        method : method,\n        url : `${config.API_URL}/${endpoint}`,\n        data : body\n    }).catch(err =>{\n       console.log(err);\n    });\n}","import * as types from './../constans/actionTypes';\nimport callAPI from './../utills/apiCaller';\n\nexport const actFetchProductRequest = () =>{\n    return (dispatch) =>{\n        return callAPI('products','GET',null).then(res => {\n            dispatch(actFetchProduct(res.data));\n        }).catch(err=>{\n            console.log(err);\n        })\n    }\n};\nexport const actFetchProduct = (products) =>{\n    return {\n        type : types.FETCH_PRODUCT,\n        products\n    }\n}\n//Delete\nexport const actDeleteProductRequest = (id) =>{\n    return (dispatch) =>{\n        return callAPI(`products/${id}`,'DELETE',null).then(res => {\n            if(res)\n            {\n                dispatch(actDeleteProduct(res.data.id));\n            }\n        }).catch(err=>{\n            console.log(err);\n        })\n    }\n};\n\nexport const actDeleteProduct = (id) =>{\n    return {\n        type : types.DELETE_PRODUCT,\n        id\n    }\n}\n\n//Add\nexport const addProduct = (product) =>{\n    return {\n        type : types.ADD_PRODUCT,\n        product\n    }\n}\n\nexport const addProductReq = (product) =>{\n    return (dispatch) =>{\n        return callAPI(`products/`,'POST',{\n            name : product.txtName,\n            price : product.txtPrice,\n            status : product.chkbStatus\n        }).then(res => {\n            if(res)\n            {\n                dispatch(addProduct(res.data));\n            }\n        }).catch(err=>{\n            console.log(err);\n        })\n    }\n}\n//Edit product to save\nexport const getProductReq = (id) =>{\n    return (dispatch) =>{\n        return callAPI(`products/${id}`,'GET',null).then(res => {\n            if(res)\n            {\n                dispatch(getProduct(res.data));\n            }\n        }).catch(err=>{\n            console.log(err);\n        })\n    }\n}\nexport const getProduct = (product) =>{\n    return {\n        type : types.EDIT_PRODUCT,\n        product\n    }\n} \n\n//update item\nexport const updateProduct = (product) => {\n    return {\n        type : types.UPDATE_PRODUCT,\n        product\n\n    }\n}\n\nexport const updateProductReq = (product) => {\n    return (dispatch) =>{\n        return callAPI(`products/${product.id}`,'PUT',product).then(res => {\n            if(res)\n            {\n                console.log(res.data);\n                dispatch(updateProduct(res.data));\n            }\n        }).catch(err=>{\n            console.log(err);\n        })\n    }\n}\n\n//Task - list\nexport const listAll = () => {\n    return {\n        type : types.LIST_ALL\n    }\n}\n\nexport const saveTask = (task) =>{\n    return {\n        type : types.SAVE_TASK,\n        task : task\n    }\n}\n\nexport const toggleForm = () =>{\n    return {\n        type : types.TOGGLE_FORM\n    }\n}\nexport const openForm = () =>{\n    return {\n        type : types.OPEN_FORM\n    }\n}\nexport const closeForm = () =>{\n    return {\n        type : types.CLOSE_FORM\n    }\n}\n\nexport const updateStatus = (id) =>{\n    return {\n        type :  types.UPDATE_STATUS_TASK,\n        id : id\n    }\n}\nexport const deleteTask = (id) =>{\n    return {\n        type :  types.DELETE_TASK,\n        id : id\n    }\n}\nexport const editTask = (task) =>{\n    return {\n        type : types.EDIT_TASK,\n        task : task\n    }\n}\n\nexport const resetTaskEdit = () =>{\n    return {\n        type : types.RESET_TASK_EDIT\n    }\n}\n\nexport const fillterTable = (fillter) =>{\n    return {\n        type : types.FILLTER_TABLE,\n        fillter : fillter\n    }\n}\n\nexport const searchTask = (keyWord) =>{\n    return {\n        type : types.SEARCH_TASK,\n        keyWord : keyWord\n    }\n}\nexport const sortTask = (valueSearch) =>{\n    return {\n        type : types.SORT_TASK,\n        sort : valueSearch\n    }\n\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux'; \nimport * as action from './../../actions/index';\n\nclass TaskForm extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            id: '',\n            name : '',\n            status : true,            \n        };\n        this.onSave = this.onSave.bind(this);\n        this.onHandleChange = this.onHandleChange.bind(this);\n    };\n    \n    onHandleChange (event) {\n        let { target } =  event ;\n        let { name, value } = target;\n        if(name ===\"status\"){\n            value = target.value === \"false\" ? false : true;\n        }\n        this.setState({\n            [name] : value\n        })\n    }\n    onSave(event) {\n        event.preventDefault();\n        this.props.onSaveTask(this.state);\n        this.props.onReset();\n        this.props.onCloseForm();\n    }\n    onHuy =() =>{\n        this.props.onReset();\n        this.props.onCloseForm();\n    }\n    render() {\n        if(!this.props.isDisplayForm) return '';\n        let id = this.state.id ;\n        return (\n            <div className=\"panel panel-success\">\n            <div className=\"panel-heading\">\n              <h3 className=\"panel-title\">{ id !== \"\" ?\"Cập nhật\" : \"Thêm Công việc\" }</h3>\n            </div>\n            <div className=\"panel-body\">\n              \n              <form onSubmit= { this.onSave }>              \n                <div className=\"form-group\">\n                  <label> Tên công việc :  </label>\n                  <input \n                  type=\"text\" \n                  className=\"form-control\"  \n                  name=\"name\" \n                  value = { this.state.name }\n                  onChange = { this.onHandleChange }\n                  />\n\n                </div>\n                <label>Trạng thái</label>\n                <select  \n                  className=\"form-control\" \n                  name=\"status\" \n                  value = { this.state.status }\n                  onChange = { this.onHandleChange }\n                >\n                  <option value={true} >Kích hoạt</option>\n                  <option value={false} >Ẩn</option>\n                </select>\n                <br/>\n                \n                <button type=\"submit\" className=\"btn btn-primary ml-40\"> Lưu lại </button> <span></span>\n                <button type=\"button\" className=\"btn btn-primary ml-40\" onClick = { this.onHuy}> Hủy </button>\n              </form>\n              \n            </div>\n        </div>\n        )\n    }\n\n    componentDidUpdate(prevProps,prevState){\n        let { itemEditing } =  this.props ;\n        if(itemEditing && prevState === this.state){\n            this.setState({\n                id : itemEditing.id,\n                name : itemEditing.name,\n                status : itemEditing.status \n            })\n        }\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isDisplayForm : state.isDisplayForm,\n        itemEditing : state.updateTask\n    }\n}\n\nconst mapDispatchToProps = (dispatch, props) =>{\n    return {\n        onSaveTask : (task) =>{\n            dispatch( action.saveTask(task) )\n        },\n        onCloseForm : ()=>{\n            dispatch(action.closeForm())\n        },\n        onReset : () =>{\n            dispatch(action.resetTaskEdit());\n        }\n        \n    }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskForm);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as action from './../../actions/index';\n\nclass Search extends Component {\n\n    constructor(props){\n        super(props);\n        this.state= {\n            keywWord : \"\"\n        };\n    }\n\n    onChange = (event) =>{\n        let { target } = event;\n        let { name, value } = target;\n        this.setState({\n            [name] : value\n        })\n    }\n\n    onSearch = ()=>{\n        this.props.onSearch(this.state.keywWord);\n        //console.log(this.state);\n    }\n    render() {\n        return (\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n            <div className=\"input-group\">\n                <input \n                type=\"text\" \n                className=\"form-control\" \n                placeholder=\"Nhập từ khóa...\" \n                name =\"keywWord\"\n                value = { this.state.keywWord }\n                onChange = { this.onChange }\n                />\n                <span className=\"input-group-btn\">\n                    <button className=\"btn btn-primary\" type=\"button\" onClick = { this.onSearch }>\n                <span className=\"fa fa-search mr-5\"></span>Tìm\n                </button>\n                </span>\n            </div>\n        </div>\n        )\n    }\n}\nconst mapStateToProps = (state) =>{\n    return {\n\n    }\n};\nconst mapDispatchToProps = (dispatch,props) =>{\n    return {\n        onSearch : (keyWord) =>{\n            dispatch(action.searchTask(keyWord))\n        }\n    }\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps) (Search);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as action from './../../actions/index';\n\nclass Sort extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            sort : {\n                by : \"name\",\n                value : 1\n            }\n        }\n    }\n\n    onClick(name,value)\n    {\n        this.setState({\n            sort : {\n                by : name,\n                value : value\n            }\n        },()=> (this.props.onSort(this.state.sort)))\n    }\n    render() {\n        let { sort } = this.state;\n        return (\n        <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n            <div className=\"dropdown\">\n                <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\n                    Sắp Xếp <span className=\"fa fa-caret-square-o-down ml-5\"></span>\n                </button>\n                <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n                    <li onClick = { () => this.onClick(\"name\",1) }>\n                        <a role=\"button\" href=\" #\" className = { sort.by === \"name\" && sort.value === 1 ? \"sort-selected\" : \"\" }>\n                                    <span className=\"fa fa-sort-alpha-asc pr-5\">\n                                        Tên A-Z\n                                    </span>\n                                </a>\n                    </li>\n                    <li onClick = { () => this.onClick(\"name\",-1) }>\n                        <a role=\"button\" href=\" #\" className = { sort.by === \"name\" && sort.value === -1 ? \"sort-selected\" : \"\" } >\n                                    <span className=\"fa fa-sort-alpha-desc pr-5\">\n                                        Tên Z-A\n                                    </span>\n                        </a>\n                    </li>\n                    <li role=\"separator\" className=\"divider\"></li>\n                    <li onClick = { () => this.onClick(\"status\",1) }>\n                        <a role=\"button\" href=\" #\" className = { sort.by === \"status\" && sort.value === 1 ? \"sort-selected\" : \"\" }>Trạng Thái Kích Hoạt</a></li>\n                    <li onClick = { () => this.onClick(\"status\",-1) }>\n                        <a role=\"button\" href=\" #\" className = { sort.by === \"status\" && sort.value === -1 ? \"sort-selected\" : \"\" }>Trạng Thái Ẩn</a></li>\n                </ul>\n            </div>\n        </div>\n        )\n    }\n}\nconst mapStateToProps = (state) =>{\n    return {\n\n    }\n};\nconst mapDispatchToProps = (dispatch,props) =>{\n    return {\n        onSort : (valueSort) =>{\n            dispatch(action.sortTask(valueSort))\n        }\n    }\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps) (Sort);","import React, { Component } from 'react'\nimport Search from './Search';\nimport Sort from './Sort';\n\nexport default class Control extends Component {\n    render() {\n        return (\n            <div className=\"row mt-15\">\n                {/* Search */}\n                <Search />\n                {/* Sort */}\n                <Sort\n                 />\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as action from './../../actions/index';\n\nclass TaskItem extends Component {\n\n\n    onUpdateStatus = () =>{\n        let { taskElm }= this.props ;\n        this.props.onUpdateStatus(taskElm.id);\n    }\n\n    OnDelete = () =>{\n        let { taskElm }= this.props ;\n        this.props.onDeleteItem(taskElm.id);\n    }\n\n    onUpdate = () =>{\n        let { taskElm }= this.props ;\n        this.props.onOpenForm();\n        this.props.onEditTask(taskElm);\n    }\n    render() {\n        return (\n                <tr>\n                    <td>{ this.props.index }</td>\n                    <td>{this.props.taskElm.name}</td>\n                    <td className=\"text-center\">\n                        <span \n                        className={ this.props.taskElm.status ?\" label label-success bt\" : \"label label-danger bt\" }\n                        onClick = { this.onUpdateStatus }>\n                            { this.props.taskElm.status ? \"Kích hoạt\" : \"Ẩn\" }\n                        </span>\n                    </td>\n                    <td className=\"text-center\">\n                    <button \n                        type=\"button\" \n                        className=\"btn btn-warning\"\n                        onClick = { this.onUpdate }\n                        >\n                        <span className=\"fa fa-pencil mr-5\"></span>Sửa\n                    </button>\n                      <span> </span>\n                      <button \n                      type=\"button\" \n                      className=\"btn btn-danger\"\n                      onClick = { this.OnDelete }\n                      >\n                        <span className=\"fa fa-trash mr-5\"></span>Xóa\n                      </button>\n                    </td>\n                </tr>\n        )\n    }\n}\n\nconst mapStateToProps = (state) =>{\n    return {\n\n    }\n}\n\nconst mapDispatchToProps = (dispatch,props) =>{\n    return{\n        onUpdateStatus : (id) => {\n            dispatch(action.updateStatus(id));\n        },\n        onDeleteItem : (id) =>{\n            dispatch(action.deleteTask(id));\n        },\n        onOpenForm : ()=>{\n            dispatch(action.openForm());\n        },\n        onEditTask: (task) =>{\n            dispatch(action.editTask(task));\n        }\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps) (TaskItem);","import React, { Component } from 'react';\nimport TaskItem from './TaskItem';\nimport { connect } from 'react-redux';\nimport * as action from './../../actions/index';\n\nclass TaskList extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            name : \"\",\n            status : -1 // -1 : all, kích hoạt : 1 , ẩn : 0 \n        };\n    }\n\n    onChange = (event) =>{\n        let { target } = event;\n        let { name , value } = target;\n        this.setState({\n            [name] : value\n        }, () => { this.props.onFillterTable(this.state) });          \n    }\n\n    render() {\n        let { task,fillterTable,keyWord,sort } = this.props;\n        if(fillterTable){\n            if(fillterTable.name){\n              task = task.filter((task) => {\n                return task.name.toLowerCase().indexOf(fillterTable.name) !== -1;\n              })\n            }\n            if(fillterTable.status !==null && fillterTable.status !== undefined ){\n                task = task.filter((task) =>{\n                if(fillterTable.status === -1){\n                  return task;\n                }else{\n                  return task.status === (fillterTable.status === 1 ? true : false);\n                }\n              })\n            }\n          }\n    //Tìm kiếm\n    if(keyWord !== null && keyWord !== undefined && keyWord !== '')\n    {\n      task = task.filter((task) => {\n        return task.name.toLowerCase().indexOf(keyWord) !== -1;\n      })\n    }\n    //Sort \n    if(sort.by === \"name\"){\n      task.sort((a,b) =>{\n        if(a.name > b.name) return sort.value;\n        else if (a.name < b.name ) return -sort.value;\n        else return 0;\n      });\n    }else{\n      task.sort((a,b) =>{\n        if(a.status > b.status) return -sort.value;\n        else if (a.name < b.name ) return sort.value;\n        else return 0;\n      })\n    }\n        let elmTask = task.map((elm,index) =>{\n            return <TaskItem \n                        taskElm = { elm } \n                        key = { elm.id } \n                        index = { index + 1 } \n                    />\n        });\n        //Lọc dữ liệu\n        let { name , status } = this.state;\n\n        return (\n            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                      <table className=\"table table-bordered table-hover\">\n                          <thead>\n                              <tr>\n                                  <th className=\"text-center\">STT</th>\n                                  <th className=\"text-center\">Tên</th>\n                                  <th className=\"text-center\">Trạng Thái</th>\n                                  <th className=\"text-center\">Hành Động</th>\n                              </tr>\n                          </thead>\n                          <tbody>\n                              <tr>\n                                  <td></td>\n                                  <td>\n                                      <input \n                                      type=\"text\" \n                                      className=\"form-control\" \n                                      name = \"name\"\n                                      value = { name }\n                                      onChange = { this.onChange }\n                                      />\n                                  </td>\n                                  <td>\n                                      <select \n                                      className=\"form-control\" \n                                      name = \"status\"\n                                      value = {status}\n                                      onChange = { this.onChange }\n                                      >\n                                          <option value=\"-1\">Tất Cả</option>\n                                          <option value=\"0\">Ẩn</option>\n                                          <option value=\"1\">Kích Hoạt</option>\n                                      </select>\n                                  </td>\n                                  <td></td>\n                              </tr>\n                              {/* List Item */}\n                              { elmTask }\n                          </tbody>\n                      </table>\n                  </div>\n        )\n    }\n    componentDidUpdate(prevProps,prevState){\n        \n    }\n}\nconst mapStateToProps = (state) =>{\n    return {\n        task : state.task,\n        fillterTable : state.fillterTable,\n        keyWord : state.search,\n        sort : state.sort\n    }\n}\nconst mapDispatchToProps = (dispatch, props) =>{\n    return{\n        onFillterTable : (fillter) =>{\n            dispatch(action.fillterTable(fillter));\n        }\n    };\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskList);","import React, { Component } from 'react';\nimport TaskForm from './../../components/Task/TaskForm';\nimport Control from './../../components/Task/Control';\nimport TaskList from './../../components/Task/TaskList';\nimport { connect } from 'react-redux';\nimport * as action from './../../actions/index';\n\n\n\nclass TaskPage extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n    }\n  }\n  render(){\n\n    let  { isDisplayForm } = this.props ;\n\n    let addBT = isDisplayForm ? \"\" : <button \n                                      type=\"button\" \n                                      className=\"btn btn-primary\"\n                                      onClick = { this.props.onToggleForm }\n                                      >\n                                          <span className=\"fa fa-plus mr-5\"></span>\n                                         Thêm công việc\n                                      </button>;\n    return (\n      <div className=\"container\">\n      <div className=\"text-center\">\n          <h1>Quản Lý Công Việc</h1>\n          <hr/>\n      </div>\n      <div className=\"row\">\n          <div className={ isDisplayForm? \"col-xs-4 col-sm-4 col-md-4 col-lg-4\" : \"col-xs-0 col-sm-0 col-md-0 col-lg-0\" }>           \n          {/* Form */}\n            <TaskForm />\n          </div>\n          <div className={ isDisplayForm? \"col-xs-8 col-sm-8 col-md-8 col-lg-8\" : \"col-xs-12 col-sm-12 col-md-12 col-lg-12\" }>\n            {/* ADD */}\n              { addBT }\n              <span>{ isDisplayForm ? \"\" : \" \" }</span>\n\n              {/* Search - Sort */}            \n                {/* Search */}                  \n                {/* Sort */}\n                <Control\n                onSort = { this.onSort }\n                />\n              {/* List*/}\n              <div className=\"row mt-15\">               \n                  <TaskList \n                  onFillter = { this.onFillter }\n                  />\n              </div>\n          </div>\n      </div>\n  </div>\n    );\n  }\n  \n}\n\nconst mapStateToProps = (state) =>{\n  return {\n      isDisplayForm : state.isDisplayForm\n  }\n}\nconst mapDispatchToProps = (dispatch , props) => {\n  return {\n      onToggleForm : ()=>{\n          dispatch(action.toggleForm());\n      },\n      onOpenForm : ()=>{\n        dispatch(action.openForm());\n      }\n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps) (TaskPage);\n"],"sourceRoot":""}